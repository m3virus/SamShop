// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamShop.Infrastructure.EntityFramework.DBContext;

#nullable disable

namespace SamShop.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(SamShopDbContext))]
    [Migration("20231113032759_thedb")]
    partial class thedb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Alley")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            Alley = "alley 1",
                            City = "City 1",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "1000",
                            State = "State 1",
                            Street = "street 1"
                        },
                        new
                        {
                            AddressId = 2,
                            Alley = "alley 2",
                            City = "City 2",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "2000",
                            State = "State 2",
                            Street = "street 2"
                        },
                        new
                        {
                            AddressId = 3,
                            Alley = "alley 3",
                            City = "City 3",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "3000",
                            State = "State 3",
                            Street = "street 3"
                        },
                        new
                        {
                            AddressId = 4,
                            Alley = "alley 4",
                            City = "City 4",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "4000",
                            State = "State 4",
                            Street = "street 4"
                        },
                        new
                        {
                            AddressId = 5,
                            Alley = "alley 5",
                            City = "City 5",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "5000",
                            State = "State 5",
                            Street = "street 5"
                        },
                        new
                        {
                            AddressId = 6,
                            Alley = "alley 6",
                            City = "City 6",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "6000",
                            State = "State 6",
                            Street = "street 6"
                        },
                        new
                        {
                            AddressId = 7,
                            Alley = "alley 7",
                            City = "City 7",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "7000",
                            State = "State 7",
                            Street = "street 7"
                        },
                        new
                        {
                            AddressId = 8,
                            Alley = "alley 8",
                            City = "City 8",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "8000",
                            State = "State 8",
                            Street = "street 8"
                        },
                        new
                        {
                            AddressId = 9,
                            Alley = "alley 9",
                            City = "City 9",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "9000",
                            State = "State 9",
                            Street = "street 9"
                        },
                        new
                        {
                            AddressId = 10,
                            Alley = "alley 10",
                            City = "City 10",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "10000",
                            State = "State 10",
                            Street = "street 10"
                        },
                        new
                        {
                            AddressId = 11,
                            Alley = "alley 11",
                            City = "City 11",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "11000",
                            State = "State 11",
                            Street = "street 11"
                        },
                        new
                        {
                            AddressId = 12,
                            Alley = "alley 12",
                            City = "City 12",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "12000",
                            State = "State 12",
                            Street = "street 12"
                        },
                        new
                        {
                            AddressId = 13,
                            Alley = "alley 13",
                            City = "City 13",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "13000",
                            State = "State 13",
                            Street = "street 13"
                        },
                        new
                        {
                            AddressId = 14,
                            Alley = "alley 14",
                            City = "City 14",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "14000",
                            State = "State 14",
                            Street = "street 14"
                        },
                        new
                        {
                            AddressId = 15,
                            Alley = "alley 15",
                            City = "City 15",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "15000",
                            State = "State 15",
                            Street = "street 15"
                        },
                        new
                        {
                            AddressId = 16,
                            Alley = "alley 16",
                            City = "City 16",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "16000",
                            State = "State 16",
                            Street = "street 16"
                        },
                        new
                        {
                            AddressId = 17,
                            Alley = "alley 17",
                            City = "City 17",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "17000",
                            State = "State 17",
                            Street = "street 17"
                        },
                        new
                        {
                            AddressId = 18,
                            Alley = "alley 18",
                            City = "City 18",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "18000",
                            State = "State 18",
                            Street = "street 18"
                        },
                        new
                        {
                            AddressId = 19,
                            Alley = "alley 19",
                            City = "City 19",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "19000",
                            State = "State 19",
                            Street = "street 19"
                        },
                        new
                        {
                            AddressId = 20,
                            Alley = "alley 20",
                            City = "City 20",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "20000",
                            State = "State 20",
                            Street = "street 20"
                        },
                        new
                        {
                            AddressId = 21,
                            Alley = "alley 21",
                            City = "City 21",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "21000",
                            State = "State 21",
                            Street = "street 21"
                        },
                        new
                        {
                            AddressId = 22,
                            Alley = "alley 22",
                            City = "City 22",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "22000",
                            State = "State 22",
                            Street = "street 22"
                        },
                        new
                        {
                            AddressId = 23,
                            Alley = "alley 23",
                            City = "City 23",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "23000",
                            State = "State 23",
                            Street = "street 23"
                        },
                        new
                        {
                            AddressId = 24,
                            Alley = "alley 24",
                            City = "City 24",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "24000",
                            State = "State 24",
                            Street = "street 24"
                        },
                        new
                        {
                            AddressId = 25,
                            Alley = "alley 25",
                            City = "City 25",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "25000",
                            State = "State 25",
                            Street = "street 25"
                        },
                        new
                        {
                            AddressId = 26,
                            Alley = "alley 26",
                            City = "City 26",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "26000",
                            State = "State 26",
                            Street = "street 26"
                        },
                        new
                        {
                            AddressId = 27,
                            Alley = "alley 27",
                            City = "City 27",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "27000",
                            State = "State 27",
                            Street = "street 27"
                        },
                        new
                        {
                            AddressId = 28,
                            Alley = "alley 28",
                            City = "City 28",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "28000",
                            State = "State 28",
                            Street = "street 28"
                        },
                        new
                        {
                            AddressId = 29,
                            Alley = "alley 29",
                            City = "City 29",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "29000",
                            State = "State 29",
                            Street = "street 29"
                        },
                        new
                        {
                            AddressId = 30,
                            Alley = "alley 30",
                            City = "City 30",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "30000",
                            State = "State 30",
                            Street = "street 30"
                        },
                        new
                        {
                            AddressId = 31,
                            Alley = "alley 31",
                            City = "City 31",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "31000",
                            State = "State 31",
                            Street = "street 31"
                        },
                        new
                        {
                            AddressId = 32,
                            Alley = "alley 32",
                            City = "City 32",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "32000",
                            State = "State 32",
                            Street = "street 32"
                        },
                        new
                        {
                            AddressId = 33,
                            Alley = "alley 33",
                            City = "City 33",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "33000",
                            State = "State 33",
                            Street = "street 33"
                        },
                        new
                        {
                            AddressId = 34,
                            Alley = "alley 34",
                            City = "City 34",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "34000",
                            State = "State 34",
                            Street = "street 34"
                        },
                        new
                        {
                            AddressId = 35,
                            Alley = "alley 35",
                            City = "City 35",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "35000",
                            State = "State 35",
                            Street = "street 35"
                        },
                        new
                        {
                            AddressId = 36,
                            Alley = "alley 36",
                            City = "City 36",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "36000",
                            State = "State 36",
                            Street = "street 36"
                        },
                        new
                        {
                            AddressId = 37,
                            Alley = "alley 37",
                            City = "City 37",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "37000",
                            State = "State 37",
                            Street = "street 37"
                        },
                        new
                        {
                            AddressId = 38,
                            Alley = "alley 38",
                            City = "City 38",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "38000",
                            State = "State 38",
                            Street = "street 38"
                        },
                        new
                        {
                            AddressId = 39,
                            Alley = "alley 39",
                            City = "City 39",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "39000",
                            State = "State 39",
                            Street = "street 39"
                        },
                        new
                        {
                            AddressId = 40,
                            Alley = "alley 40",
                            City = "City 40",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "40000",
                            State = "State 40",
                            Street = "street 40"
                        },
                        new
                        {
                            AddressId = 41,
                            Alley = "alley 41",
                            City = "City 41",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "41000",
                            State = "State 41",
                            Street = "street 41"
                        },
                        new
                        {
                            AddressId = 42,
                            Alley = "alley 42",
                            City = "City 42",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "42000",
                            State = "State 42",
                            Street = "street 42"
                        },
                        new
                        {
                            AddressId = 43,
                            Alley = "alley 43",
                            City = "City 43",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "43000",
                            State = "State 43",
                            Street = "street 43"
                        },
                        new
                        {
                            AddressId = 44,
                            Alley = "alley 44",
                            City = "City 44",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "44000",
                            State = "State 44",
                            Street = "street 44"
                        },
                        new
                        {
                            AddressId = 45,
                            Alley = "alley 45",
                            City = "City 45",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "45000",
                            State = "State 45",
                            Street = "street 45"
                        },
                        new
                        {
                            AddressId = 46,
                            Alley = "alley 46",
                            City = "City 46",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "46000",
                            State = "State 46",
                            Street = "street 46"
                        },
                        new
                        {
                            AddressId = 47,
                            Alley = "alley 47",
                            City = "City 47",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "47000",
                            State = "State 47",
                            Street = "street 47"
                        },
                        new
                        {
                            AddressId = 48,
                            Alley = "alley 48",
                            City = "City 48",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "48000",
                            State = "State 48",
                            Street = "street 48"
                        },
                        new
                        {
                            AddressId = 49,
                            Alley = "alley 49",
                            City = "City 49",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "49000",
                            State = "State 49",
                            Street = "street 49"
                        },
                        new
                        {
                            AddressId = 50,
                            Alley = "alley 50",
                            City = "City 50",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "50000",
                            State = "State 50",
                            Street = "street 50"
                        },
                        new
                        {
                            AddressId = 51,
                            Alley = "alley 51",
                            City = "City 51",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "51000",
                            State = "State 51",
                            Street = "street 51"
                        },
                        new
                        {
                            AddressId = 52,
                            Alley = "alley 52",
                            City = "City 52",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "52000",
                            State = "State 52",
                            Street = "street 52"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AddressCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AddressCustomers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AdminId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7e22f77-eda9-4a8f-9385-97440a3d2dd5",
                            Email = "m3virus@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohammadhasan",
                            IsDeleted = false,
                            LastName = "Yazdani",
                            LockoutEnabled = false,
                            NormalizedUserName = "M3VIRUS",
                            PasswordHash = "AQAAAAIAAYagAAAAEKA3h8GR7sZc+/6KGfTKoBvbZiGKEWENrUXnoUsLU6lY+uZNngF099wUDj6TkAlfpQ==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 13, 6, 57, 59, 194, DateTimeKind.Local).AddTicks(6189),
                            SecurityStamp = "ada52434-8c0a-46b4-ad4f-6adc11d10126",
                            TwoFactorEnabled = false,
                            UserName = "M3Virus"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57c2412a-e220-4231-a928-bf2491d16e96",
                            Email = "Customer2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "cust",
                            IsDeleted = false,
                            LastName = "omer",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAAIAAYagAAAAECHKkjlGJ6zbUcvATZ48Lz0Amr3xG+QZq1V4o2suY9TGXs1NkCYV3fbZtyZ3qpJKHw==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 13, 6, 57, 59, 194, DateTimeKind.Local).AddTicks(6216),
                            SecurityStamp = "7e7ef5cf-2de1-4bdd-93ec-1f48b1252796",
                            TwoFactorEnabled = false,
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2865ebe4-3fc4-4640-8c25-0de333121f49",
                            Email = "Customer2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "cust",
                            IsDeleted = false,
                            LastName = "omer",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlbWxnuuIiUXJ1KqAdS7W778i2iUImfjx8A+lbpbUrqxz/GV0Ov7BN5a4Z7cQLnnA==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 13, 6, 57, 59, 194, DateTimeKind.Local).AddTicks(6231),
                            SecurityStamp = "08b6ac3e-ffe9-41a8-b3de-52357847c1e0",
                            TwoFactorEnabled = false,
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "673d09c7-7399-41d9-83c5-03eeec517448",
                            Email = "Seller1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "sel",
                            IsDeleted = false,
                            LastName = "ler",
                            LockoutEnabled = false,
                            NormalizedUserName = "Seller1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOEI7iAxmyQALHUAwr53MOK7FJZnuOR5YcZ69zObM37p+igxpHLYlGx1hN8gbEHuEw==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 13, 6, 57, 59, 194, DateTimeKind.Local).AddTicks(6237),
                            SecurityStamp = "b8aa1d5f-eb7e-483c-9fd0-974da6cc644f",
                            TwoFactorEnabled = false,
                            UserName = "Seller1"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<string>("AuctionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TheLowestOffer")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("AuctionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AuctionOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OfferTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OfferValue")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("OfferId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionOffers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.Property<int>("BoothId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoothId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BoothName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BoothId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Booths");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Medal", b =>
                {
                    b.Property<int>("MedalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedalId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WagePercentage")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("MedalId");

                    b.ToTable("Medals");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BoothId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.ProductCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCarts");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("SellerId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("BoothId")
                        .IsUnique();

                    b.HasIndex("MedalId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Wage", b =>
                {
                    b.Property<int>("WageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WageId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PayTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(2)
                        .HasColumnType("decimal(2,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("WageId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SellerId")
                        .IsUnique();

                    b.ToTable("Wages");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Discription = "Access to Everything"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER",
                            Discription = "Access to Products"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Seller",
                            NormalizedName = "SELLER",
                            Discription = "Access to Selling Things"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AddressCustomer", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithMany("AddressCustomers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Address_AddressCustomer");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("AddressCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_AddressCustomer");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Address_Admin");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "Appuser")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Admin");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Admin");

                    b.Navigation("Address");

                    b.Navigation("Appuser");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Auction");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Seller", "Seller")
                        .WithMany("Auctions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Seller_Auction");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AuctionOffer", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Auction", "Auction")
                        .WithMany("AuctionOffers")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Auction_AuctionOffer");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("AuctionOffers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_AuctionOffer");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Booth")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Booth", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Address_Booth");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Cart", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Comment", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithOne("Comment")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Comment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_Comment");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Comment");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Customer");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Customer")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Customer", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Customer");

                    b.Navigation("AppUser");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Product_Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Booth", "Booth")
                        .WithMany("Products")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Booth_Product");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Category_Product");

                    b.Navigation("Booth");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.ProductCart", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Cart", "Cart")
                        .WithMany("ProductCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Cart_ProductCart");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("ProductCarts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_ProductCart");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Address_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "AppUser")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Booth", "Booth")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Booth_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Medal", "Medal")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "MedalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Medal_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Seller");

                    b.Navigation("Address");

                    b.Navigation("AppUser");

                    b.Navigation("Booth");

                    b.Navigation("Medal");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Wage", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Admin", "Admin")
                        .WithMany("Wages")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Admin_Wage");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithOne("Wage")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Wage", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Wage");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Seller", "Seller")
                        .WithOne("Wage")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Wage", "SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Seller_Wage");

                    b.Navigation("Admin");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Address", b =>
                {
                    b.Navigation("AddressCustomers");

                    b.Navigation("Admin");

                    b.Navigation("Booth");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.Navigation("Wages");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.Navigation("AuctionOffers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Cart", b =>
                {
                    b.Navigation("ProductCarts");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.Navigation("AddressCustomers");

                    b.Navigation("AuctionOffers");

                    b.Navigation("Carts");

                    b.Navigation("Comment")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Medal", b =>
                {
                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("ProductCarts");

                    b.Navigation("Wage")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Wage")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
