// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamShop.Infrastructure.EntityFramework.DBContext;

#nullable disable

namespace SamShop.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(SamShopDbContext))]
    partial class SamShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<int>("CartsCartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("CartsCartId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("CartProducts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Alley")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            Alley = "alley 1",
                            City = "City 1",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "1000",
                            State = "State 1",
                            Street = "street 1"
                        },
                        new
                        {
                            AddressId = 2,
                            Alley = "alley 2",
                            City = "City 2",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "2000",
                            State = "State 2",
                            Street = "street 2"
                        },
                        new
                        {
                            AddressId = 3,
                            Alley = "alley 3",
                            City = "City 3",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "3000",
                            State = "State 3",
                            Street = "street 3"
                        },
                        new
                        {
                            AddressId = 4,
                            Alley = "alley 4",
                            City = "City 4",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "4000",
                            State = "State 4",
                            Street = "street 4"
                        },
                        new
                        {
                            AddressId = 5,
                            Alley = "alley 5",
                            City = "City 5",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "5000",
                            State = "State 5",
                            Street = "street 5"
                        },
                        new
                        {
                            AddressId = 6,
                            Alley = "alley 6",
                            City = "City 6",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "6000",
                            State = "State 6",
                            Street = "street 6"
                        },
                        new
                        {
                            AddressId = 7,
                            Alley = "alley 7",
                            City = "City 7",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "7000",
                            State = "State 7",
                            Street = "street 7"
                        },
                        new
                        {
                            AddressId = 8,
                            Alley = "alley 8",
                            City = "City 8",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "8000",
                            State = "State 8",
                            Street = "street 8"
                        },
                        new
                        {
                            AddressId = 9,
                            Alley = "alley 9",
                            City = "City 9",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "9000",
                            State = "State 9",
                            Street = "street 9"
                        },
                        new
                        {
                            AddressId = 10,
                            Alley = "alley 10",
                            City = "City 10",
                            ExtraPart = "level 1",
                            IsDeleted = false,
                            PostCode = "10000",
                            State = "State 10",
                            Street = "street 10"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AdminId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            AddressId = 3,
                            AppUserId = 1,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 521, DateTimeKind.Local).AddTicks(9727),
                            IsDeleted = false,
                            Wallet = 100m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discription = "Access to Everything",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Discription = "Access to Products",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            Discription = "Access to Selling Things",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef76bbd1-a0a5-49b1-bdba-9ef53942b162",
                            Email = "m3virus@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohammadhasan",
                            IsDeleted = false,
                            LastName = "Yazdani",
                            LockoutEnabled = false,
                            NormalizedUserName = "M3VIRUS",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6O6DvTk3Pi7TQmzwkG0aZ9DI1ngdBfCy1WE6RCylOBZkaOyPBV8yaXrJZzRN5rXw==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 25, 7, 52, 5, 165, DateTimeKind.Local).AddTicks(4350),
                            SecurityStamp = "939ada09-2330-4cf4-84e0-a49ab6560f86",
                            TwoFactorEnabled = false,
                            UserName = "M3Virus"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cf7bdf3-82d9-4c15-9ffa-1901dd756275",
                            Email = "Customer2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "cust",
                            IsDeleted = false,
                            LastName = "omer",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIG4PODKRPFM9471xz2kPYW3+0zAMSuSOl7gULqozOWr0RTP94nCOYaGV/Naa0TNNQ==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 25, 7, 52, 5, 165, DateTimeKind.Local).AddTicks(4436),
                            SecurityStamp = "de805afd-cdd2-4ffe-bcf3-5a33412af66a",
                            TwoFactorEnabled = false,
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9019492f-0f92-496e-9804-2f3651090839",
                            Email = "Customer2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "cust",
                            IsDeleted = false,
                            LastName = "omer",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEz3uxtlLq3slKgDkfgL1KIrrCF55b83TkZu0FRyQQhq82aPNqjbeqIPQ9E2z0cccg==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 25, 7, 52, 5, 165, DateTimeKind.Local).AddTicks(4535),
                            SecurityStamp = "90b0652f-9722-4dc2-9ee3-609b57595d4c",
                            TwoFactorEnabled = false,
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "196c0c09-579f-4a8e-8b02-d3bef4ddce8b",
                            Email = "Seller1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "sel",
                            IsDeleted = false,
                            LastName = "ler",
                            LockoutEnabled = false,
                            NormalizedUserName = "Seller1",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMmfq2EMLkIzXxLZDnEiyfUCI9Iet2Jwf2v8OTZ5DcTgKXE/HDTdpdH+YyYjMoSmQ==",
                            PhoneNumber = "0912345678",
                            PhoneNumberConfirmed = true,
                            RegisterTime = new DateTime(2023, 11, 25, 7, 52, 5, 165, DateTimeKind.Local).AddTicks(4729),
                            SecurityStamp = "6fc36a9e-68ec-46b3-b6a5-9ab2ba3a3155",
                            TwoFactorEnabled = false,
                            UserName = "Seller1"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<string>("AuctionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TheLowestOffer")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AuctionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            AuctionId = 1,
                            AuctionTitle = "AuctionSample 1",
                            EndTime = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            IsAccepted = false,
                            IsCanceled = false,
                            ProductId = 1,
                            SellerId = 1,
                            StartTime = new DateTime(2023, 11, 25, 7, 52, 5, 521, DateTimeKind.Local).AddTicks(2336),
                            TheLowestOffer = 10m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AuctionOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OfferTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OfferValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OfferId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AuctionOffers");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            AuctionId = 1,
                            CustomerId = 1,
                            IsAccept = false,
                            IsCanceled = false,
                            OfferTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferValue = 11m
                        },
                        new
                        {
                            OfferId = 2,
                            AuctionId = 1,
                            CustomerId = 2,
                            IsAccept = false,
                            IsCanceled = false,
                            OfferTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferValue = 22m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.Property<int>("BoothId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoothId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BoothName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BoothId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Booths");

                    b.HasData(
                        new
                        {
                            BoothId = 1,
                            AddressId = 5,
                            BoothName = "booth 1",
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 523, DateTimeKind.Local).AddTicks(4208),
                            IsDeleted = false
                        },
                        new
                        {
                            BoothId = 2,
                            AddressId = 6,
                            BoothName = "booth 2",
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 523, DateTimeKind.Local).AddTicks(4221),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 524, DateTimeKind.Local).AddTicks(8666),
                            CustomerId = 1,
                            IsCanceled = false,
                            IsPayed = false,
                            TotalPrice = 0m
                        },
                        new
                        {
                            CartId = 2,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 524, DateTimeKind.Local).AddTicks(8679),
                            CustomerId = 2,
                            IsCanceled = false,
                            IsPayed = false,
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "category 1",
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 525, DateTimeKind.Local).AddTicks(31),
                            IsAccepted = true,
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "category 2",
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 525, DateTimeKind.Local).AddTicks(68),
                            IsAccepted = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            IsAccepted = true,
                            IsDeleted = false,
                            Message = "Message 1",
                            ProductId = 1
                        },
                        new
                        {
                            CommentId = 2,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            IsAccepted = true,
                            IsDeleted = false,
                            Message = "Message 2",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            AppUserId = 2,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 523, DateTimeKind.Local).AddTicks(9072),
                            IsDeleted = false,
                            Wallet = 10m
                        },
                        new
                        {
                            CustomerId = 2,
                            AppUserId = 3,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 523, DateTimeKind.Local).AddTicks(9089),
                            IsDeleted = false,
                            Wallet = 20m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Medal", b =>
                {
                    b.Property<int>("MedalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedalId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WagePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedalId");

                    b.ToTable("Medals");

                    b.HasData(
                        new
                        {
                            MedalId = 1,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 525, DateTimeKind.Local).AddTicks(4485),
                            IsDeleted = false,
                            MedalType = "Medal 1",
                            WagePercentage = 4m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BoothId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AddTime = new DateTime(2023, 11, 25, 7, 52, 5, 525, DateTimeKind.Local).AddTicks(8035),
                            Amount = 5,
                            BoothId = 1,
                            CategoryId = 1,
                            IsAccepted = false,
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 6m,
                            ProductName = "Product 1"
                        },
                        new
                        {
                            ProductId = 2,
                            AddTime = new DateTime(2023, 11, 25, 7, 52, 5, 525, DateTimeKind.Local).AddTicks(8044),
                            Amount = 5,
                            BoothId = 2,
                            CategoryId = 2,
                            IsAccepted = false,
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 12m,
                            ProductName = "Product 2"
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("BoothId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedalId")
                        .HasColumnType("int");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SellerId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("BoothId")
                        .IsUnique();

                    b.HasIndex("MedalId");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            SellerId = 1,
                            AddressId = 5,
                            AppUserId = 4,
                            BoothId = 1,
                            CreateTime = new DateTime(2023, 11, 25, 7, 52, 5, 526, DateTimeKind.Local).AddTicks(3458),
                            IsDeleted = false,
                            MedalId = 1,
                            Wallet = 100m
                        });
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Wage", b =>
                {
                    b.Property<int>("WageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WageId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("WageId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SellerId")
                        .IsUnique();

                    b.ToTable("Wages");

                    b.HasData(
                        new
                        {
                            WageId = 1,
                            AdminId = 1,
                            IsDeleted = false,
                            PayTime = new DateTime(2023, 11, 25, 7, 52, 5, 526, DateTimeKind.Local).AddTicks(6663),
                            Price = 4m,
                            ProductId = 1,
                            SellerId = 1
                        });
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Address", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("Address")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Address_Admin");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "Appuser")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Admin");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Admin")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Admin", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Admin");

                    b.Navigation("Address");

                    b.Navigation("Appuser");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Auctions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Auction");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Seller", "Seller")
                        .WithMany("Auctions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Seller_Auction");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AuctionOffer", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Auction", "Auction")
                        .WithMany("AuctionOffers")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Auction_AuctionOffer");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("AuctionOffers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_AuctionOffer");

                    b.Navigation("Auction");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Booth")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Booth", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Address_Booth");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Cart", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_Cart");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Comment", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Customer", "Customer")
                        .WithOne("Comment")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Comment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Customer_Comment");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Comment");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Customer");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Customer")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Customer", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Customer");

                    b.Navigation("AppUser");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Product_Picture");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Booth", "Booth")
                        .WithMany("Products")
                        .HasForeignKey("BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Booth_Product");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Category_Product");

                    b.Navigation("Booth");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Address", "Address")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Address_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.AppUser", "AppUser")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AppUser_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Booth", "Booth")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "BoothId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Booth_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Medal", "Medal")
                        .WithMany("Sellers")
                        .HasForeignKey("MedalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Medal_Seller");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Picture", "Picture")
                        .WithOne("Seller")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Seller", "PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Picture_Seller");

                    b.Navigation("Address");

                    b.Navigation("AppUser");

                    b.Navigation("Booth");

                    b.Navigation("Medal");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Wage", b =>
                {
                    b.HasOne("SamShop.Domain.Core.Models.Entities.Admin", "Admin")
                        .WithMany("Wages")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Admin_Wage");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Product", "Product")
                        .WithOne("Wage")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Wage", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Product_Wage");

                    b.HasOne("SamShop.Domain.Core.Models.Entities.Seller", "Seller")
                        .WithOne("Wage")
                        .HasForeignKey("SamShop.Domain.Core.Models.Entities.Wage", "SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Seller_Wage");

                    b.Navigation("Admin");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Address", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Booth");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Admin", b =>
                {
                    b.Navigation("Wages");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Auction", b =>
                {
                    b.Navigation("AuctionOffers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Booth", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("AuctionOffers");

                    b.Navigation("Carts");

                    b.Navigation("Comment")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Medal", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Picture", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Product", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("Wage")
                        .IsRequired();
                });

            modelBuilder.Entity("SamShop.Domain.Core.Models.Entities.Seller", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Wage")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
